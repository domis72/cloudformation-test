
AWSTemplateFormatVersion: 2010-09-09
Description: Create CodePipeline
Parameters: 
  CodeBuildEnvironmentComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
  CodeBuildImage:
    Description: The codebuild runtime image to use in the Codebuild project
    Type: String
    Default: "aws/codebuild/standard:2.0"
  GithubRepoBranch:
    Description: The git branch that will be polled for changes
    Type: String
    Default: "main"


  GithubFullRepo:
    Description: The git repository base name
    Type: String
    Default: "sorididim11/MyDemoRepo"

Resources: 
  # bucket for pipeline
  MyCodePipelineBucket:
    Type: AWS::S3::Bucket # it seems that there is no way to delete non-empty bucket so keep it or 'aws s3 rm s3://<buceket nanem> --recursive'
    DeletionPolicy: Retain

  MyGithubConnection:
    Type: "AWS::CodeStarConnections::Connection"
    Properties:
      ConnectionName: MyGithubConnection 
      ProviderType: GitHub
  
  CodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codedeploy.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'

  # IAM role for codebuild project. Should give access all AWS resources needed by build and tests run by build.
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow code build to stream logs
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: S3AccessPolicy
                Effect: Allow
                Action:
                  - S3:List*
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: "*"
              - Sid: CodeBuildAccessPolicy
                Effect: Allow
                Action:
                  - codebuild:*
                Resource: "*"
                
  # IAM role for pipeline inclues S3, CodeBuild, Events
  MyCodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
           Service: codepipeline.amazonaws.com 
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3AccessPolicy
                Effect: Allow
                Action:
                  - S3:List*
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteBucket
                Resource:
                  - !Sub "arn:aws:s3:::${MyCodePipelineBucket}"
                  - !Sub "arn:aws:s3:::${MyCodePipelineBucket}/*"
              - Sid: CodeBuildAccessPolicy
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt CodeBuildProjectTest.Arn
                #  - !GetAtt CodeBuildProjectDeploy.Arn
                #  - !GetAtt CodeBuildProjectTagRepo.Arn
              - Sid: CodeDeployPolicy
                Effect: Allow
                Action:
                  - codedeploy:*
                Resource: "*" 
              - Sid: CodeStarConnectionPolicy
                Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: "*"
              - Sid: EventsAccessPolicy
                Effect: Allow
                Action: events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"
  
    ### Codebuild projects
  
  CodeBuildProjectTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-test"
      Description: CodePipeline standard build stage provider.
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub "arn:aws:s3:::${MyCodePipelineBucket}"
        Type: S3
      TimeoutInMinutes: 5
      Environment:
        ComputeType: !Ref CodeBuildEnvironmentComputeType
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
  
  ### CodeDeploy application
  MyApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: deom1
      ComputePlatform: Server
  # MyDeploymentConfig:
  #   Type: "AWS::CodeDeploy::DeploymentConfig"
  #   Properties:
  #     DeploymentConfigName: MyDeploymentConfig
  #     MinimumHealthyHosts:  
  #        Type: HOST_COUNT 
  #        Value: 1 
  MyCodeDeployGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref MyApplication #required
      #DeploymentConfigName: !Ref MyDeploymentConfig
      DeploymentStyle:
         DeploymentOption: WITH_TRAFFIC_CONTROL
         DeploymentType: BLUE_GREEN  # IN_PLACE 
      Ec2TagFilters:
        - Key: Name
          Type: KEY_ONLY 
      # LoadBalancerInfo:
      #   ElbInfoList: [ 'name']
      #   TargetGroupInfoList: ['name']
        
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn #required
      # TriggerConfigurations:
      #   - TriggerConfig
  
    
  MyCodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: MyCodePipeline
      ArtifactStore:
        Type: S3
        Location: !Ref MyCodePipelineBucket
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt MyCodePipelineRole.Arn
      Stages: #required
      - Name: Source
        Actions:
        - Name: Source
          RunOrder: 1
          ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeStarSourceConnection
            Version: '1'
          Configuration:
            ConnectionArn: !Ref MyGithubConnection
            FullRepositoryId: !Ref GithubFullRepo
            BranchName: !Ref GithubRepoBranch
          OutputArtifacts:
            - Name: SourceOutput
      - Name: Test
        Actions:
        - Name: Test
          RunOrder: 1
          ActionTypeId:
            Category: Test
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName: !Ref CodeBuildProjectTest
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: TestOutput
      - Name: Deploy
        Actions:
        - Name: Deploy
          RunOrder: 1
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CodeDeploy
            Version: '1'
          Configuration:
            ApplicationName: !Ref MyApplication
            DeploymentGroupName: !Ref MyCodeDeployGroup
          InputArtifacts:
          - Name: TestOutput



  
    
### Notifications
  # Failure notifications
  # CodePipelineStateFailureEventRule:
  #   Type: "AWS::Events::Rule"
  #   Properties:
  #     Description: "Rule for sending failure notifications to SNS topic"
  #     EventPattern:
  #       source:
  #         - aws.codepipeline
  #       detail-type:
  #         - CodePipeline Action Execution State Change
  #       detail:
  #         pipeline:
  #           - !Ref MyCodePipeline
  #         stage:
  #           - Deploy
  #           - Test
  #           - Source
  #         state:
  #           - FAILED
  #     State: "ENABLED"
  #     Targets:
  #       - Arn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CodebuildNotifications"
  #         Id: "CodePipelineFailureNotifications"
  #         InputTransformer:
  #           InputTemplate: "Fn::Sub ${ENV} <stage> stage has <state> for <pipeline> pipeline! Pipeline view: https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${AWS::StackName}/view"
  #           InputPathsMap:
  #             pipeline: "$.detail.pipeline"
  #             stage: "$.detail.stage"
  #             state: "$.detail.state"
  # # Successful deployment notifications
  # CodePipelineSuccessfulDeployEventRule:
  #   Type: "AWS::Events::Rule"
  #   Properties:
  #     Description: "Rule for sending failure notifications to SNS topic"
  #     EventPattern:
  #       source:
  #         - aws.codepipeline
  #       detail-type:
  #         - CodePipeline Stage Execution State Change
  #       detail:
  #         pipeline:
  #           - !Ref MyCodePipeline
  #         stage:
  #           - Deploy
  #         state:
  #           - SUCCEEDED
  #     State: "ENABLED"
  #     Targets:
  #       - Arn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CodebuildNotifications"
  #         Id: "CodePipelineSuccessfulDeployNotifications"
  #         InputTransformer:
  #           InputTemplate: "Fn::Sub ${ENV} <stage> stage has <state> for <pipeline> pipeline! Pipeline view: https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${AWS::StackName}/view"
  #           InputPathsMap:
  #             pipeline: "$.detail.pipeline"
  #             stage: "$.detail.stage"
  #             state: "$.detail.state"